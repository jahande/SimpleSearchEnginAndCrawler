Computer science - Wikipedia, the free encyclopedia Computer science From Wikipedia, the free encyclopedia Jump to: navigation, search Computer science (abbreviated CS or CompSci) is the scientific and practical approach to computation and its applications. It is the systematic study of the feasibility, structure, expression, and mechanization of the methodical processes (or algorithms) that underlie the acquisition, representation, processing, storage, communication of, and access to information, whether such information is encoded in bits and bytes in a computer memory or transcribed engines and protein structures in a human cell.[1] A computer scientist specializes in the theory of computation and the design of computational systems.[2] Its subfields can be divided into a variety of theoretical and practical disciplines. Some fields, such as computational complexity theory (which explores the fundamental properties of Computational and intractable problems), are highly abstract, while fields such as computer graphics emphasize real-world visual applications. Still other fields focus on the challenges in implementing computation. For example, programming language theory considers various approaches to the description of computation, whilst the study of computer programming itself investigates various aspects of the use of programming language and complex systems. Human-computer interaction considers the challenges in making computers and computations useful, usable, and universally accessible to humans. Computer science deals with the theoretical foundations of information and computation, together with practical techniques for the implementation and application of these foundations Contents 1 History 1.1 Major achievements 2 Philosophy 2.1 Name of the field 3 Areas of computer science 3.1 Theoretical computer science 3.1.1 Theory of computation 3.1.2 Information and coding theory 3.1.3 Algorithms and data structures 3.1.4 Programming language theory 3.1.5 Formal methods 3.2 Applied computer science 3.2.1 Artificial intelligence 3.2.2 Computer architecture and engineering 3.2.3 Computer graphics and visualization 3.2.4 Computer security and cryptography 3.2.5 Computational science 3.2.6 Computer Networks 3.2.7 Concurrent, parallel and distributed systems 3.2.8 Databases and information retrieval 3.2.9 Health Informatics 3.2.10 Information science 3.2.11 Software engineering 4 The great insights of computer science 5 Academia 5.1 Conferences 5.2 Journals 6 Education 7 See also 8 Notes 9 References 10 Further reading 11 External links History[edit] Main article: History of computer science Charles Babbage is credited with inventing the first mechanical computer. Ada Lovelace is credited with writing the first algorithm intended for processing on a computer. The earliest foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks such as the abacus have existed since antiquity, aiding in computations such as multiplication and division. Blaise Pascal designed and constructed the first working mechanical calculator, Pascal's calculator, in 1642.[3] In 1673 Gottfried Leibniz demonstrated a digital mechanical calculator, called the 'stepped reckoner'.[4] He may be considered the first computer scientist and information theorist, for, among other reasons documenting the binary number system. In 1820, Thomas de Colmar launched the mechanical calculator industry[5] when he released his simplified arithmometer, which was the first calculating machine strong enough and reliable enough to be used daily in an office environment. Charles Babbage started the design of the first automatic mechanical calculator, his difference engine, in 1822, which eventually gave him the idea of the first programmable mechanical calculator, his Analytical Engine.[6] He started developing this machine in 1834 and "in less than two years he had sketched out many of the salient features of the modern computer. A crucial step was the adoption of a punched card system derived from the Jacquard loom"[7] making it infinitely programmable.[8] In 1843, during the translation of a French article on the analytical engine, Ada Lovelace wrote, in one of the many notes she included, an algorithm to compute the Bernoulli numbers, which is considered to be the first computer program.[9] Around 1885, Herman Hollerith invented the tabulator which used punched cards to process statistical information; eventually his company became part of IBM. In 1937, one hundred years after Babbage's impossible dream, Howard Aiken convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business[10] to develop his giant programmable calculator, the ASCC/Harvard Mark I, based on Babbage's analytical engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as "Babbage's dream come true".[11] During the 1940s, as new and more powerful computing machines were developed, the term computer came to refer to the machines rather than their human predecessors.[12] As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study computation in general. Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.[13][14] The world's first computer science degree program, the Cambridge Diploma in Computer Science, began at the University of Cambridge Computer Laboratory in 1953. The first computer science degree program in the United States was formed at Purdue University in 1962.[15] Since practical computers became available, many applications of computing have become distinct areas of study in their own right. Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.[16] It is the now well-known IBM brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704[17] and later the IBM 709[18] computers, which were widely used during the exploration period of such devices. "Still, working with the IBM [computer] was frustrating...if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again".[16] During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace. Time has seen significant improvements in the usability and effectiveness of computing technology. Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-ubiquitous user base. Initially, computers were quite costly, and some degree of human aid was needed for efficient use - in part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage. Major achievements[edit] The German military used the Enigma machine (shown here) during World War II for communication they thought to be secret. The large-scale decryption of Enigma traffic at Bletchley Park was an important factor that contributed to Allied victory in WWII.[19] Despite its short history as a formal academic discipline, computer science has made a number of fundamental contributions to science and society - in fact, along with electronics, it is a founding science of the current epoch of human history called the Information Age and a driver of the Information Revolution, seen as the third major leap in human technological progress after the Industrial Revolution (1750-1850 CE) and the Agricultural Revolution (8000-5000 BCE). These contributions include: The start of the "digital revolution," which includes the current Information Age and the Internet.[20] A formal definition of computation and computability, and proof that there are computationally unsolvable and intractable problems.[21] The concept of a programming language, a tool for the precise expression of methodological information at various levels of abstraction.[22] In cryptography, breaking the Enigma code was an important factor contributing to the Allied victory in World War II.[19] Scientific computing enabled practical evaluation of processes and situations of great complexity, as well as experimentation entirely by software. It also enabled advanced study of the mind, and mapping of the human genome became possible with the Human Genome Project.[20] Distributed computing projects such as Folding@home explore protein folding. Algorithmic trading has increased the efficiency and liquidity of financial markets by using artificial intelligence, machine learning, and other statistical and numerical techniques on a large scale.[23] High frequency algorithmic trading can also exacerbate volatility.[24] Computer graphics and computer-generated imagery have become almost ubiquitous in modern entertainment, particularly in television, cinema, advertising, animation and video games. Even films that feature no explicit CGI are usually "filmed" now on digital cameras, or edited or postprocessed using a digital video editor.[citation needed] Simulation of various processes, including computational fluid dynamics, physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are SPICE, as well as software for physical realization of new (or modified) designs. The latter includes essential design software for integrated circuits.[citation needed] Artificial intelligence is becoming increasingly important as it gets more efficient and complex. There are many applications of the AI, some of which can be seen at home, such as robotic vacuum cleaners. It is also present in video games and on the modern battlefield in drones, anti-missile systems, and squad support robots. Philosophy[edit] Main article: Philosophy of computer science A number of computer scientists have argued for the distinction of three separate paradigms in computer science. Peter Wegner argued that those paradigms are science, technology, and mathematics.[25] Peter Denning's working group argued that they are theory, abstraction (modeling), and design.[26] Amnon H. Eden described them as the "rationalist paradigm" (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs deductive reasoning), the "technocratic paradigm" (which might be found in engineering approaches, most prominently in software engineering), and the "scientific paradigm" (which approaches computer-related artifacts from the empirical perspective of natural sciences, identifiable in some branches of artificial intelligence).[27] Name of the field[edit] The term "computer science" appears in a 1959 article in Communications of the ACM,[28] in which Louis Fein argues for the creation of a Graduate School in Computer Sciences analogous to the creation of Harvard Business School in 1921,[29] justifying the name by arguing that, like management science, the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.[30] His efforts, and those of others such as numerical analyst George Forsythe, were rewarded: universities went on to create such programs, starting with Purdue in 1962.[31] Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.[32] Certain departments of major universities prefer the term computing science, to emphasize precisely that difference. Danish scientist Peter Naur suggested the term datalogy,[33] to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the Communications of the ACM  turingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.[34] Three months later in the same journal, comptologist was suggested, followed next year by hypologist.[35] The term computics has also been suggested.[36] In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g. informatique (French), Informatik (German), informatica (Italy, The Netherlands), inform?tica (Spain, Portugal), informatika (Slavic languages) or pliroforiki (???????????, which means informatics) in Greek. Similar words have also been adopted in the UK (as in the School of Informatics of the University of Edinburgh).[37] A folkloric quotation, often attributed tobut almost certainly not first formulated byEdsger Dijkstra, states that "computer science is no more about computers than astronomy is about telescopes."[note 1] The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part of computer engineering, while the study of commercial computer systems and their deployment is often called information technology or information systems. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as philosophy, cognitive science, linguistics, mathematics, physics, statistics, and logic. Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.[13] Early computer science was strongly influenced by the work of mathematicians such as Kurt G?del and Alan Turing, and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra. The relationship between computer science and software engineering is a contentious issue, which is further muddied by disputes over what the term "software engineering" means, and how computer science is defined.[38] David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.[39] The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with computational science. Both types of departments tend to make efforts to bridge the field educationally if not across all research. Areas of computer science[edit] As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.[40][41] CSAB, formerly called Computing Sciences Accreditation Board  which is made up of representatives of the Association for Computing Machinery (ACM), and the IEEE Computer Society (IEEE-CS)[42]  identifies four areas that it considers crucial to the discipline of computer science: theory of computation, algorithms and data structures, programming methodology and languages, and computer elements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, computer-human interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.[40] Theoretical computer science[edit] Main article: Theoretical computer science The broader field of theoretical computer science encompasses both the classical theory of computation and a wide range of other topics that focus on the more abstract, logical, and mathematical aspects of computing. Theory of computation[edit] Main article: Theory of computation According to Peter J. Denning, the fundamental question underlying computer science is, "What can be (efficiently) automated?"[13] The study of the theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on various theoretical models of computation. The second question is addressed by computational complexity theory, which studies the time and space costs associated with different approaches to solving a multitude of computational problems. The famous "P=NP?" problem, one of the Millennium Prize Problems,[43] is an open problem in the theory of computation. P = NP ? GNITIRW-TERCES Automata theory Computability theory Computational complexity theory Cryptography Quantum computing theory Information and coding theory[edit] Main articles: Information theory and Coding theory Information theory is related to the quantification of information. This was developed by Claude E. Shannon to find fundamental limits on signal processing operations such as compressing data and on reliably storing and communicating data.[44] Coding theory is the study of the properties of codes (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for data compression, cryptography, error detection and correction, and more recently also for network coding. Codes are studied for the purpose of designing efficient and reliable data transmission methods. Algorithms and data structures[edit] Analysis of algorithms Algorithms Data structures Computational geometry Programming language theory[edit] Main article: Programming language theory Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual features. It falls within the discipline of computer science, both depending on and affecting mathematics, software engineering and linguistics. It is an active research area, with numerous dedicated academic journals. Type theory Compiler design Programming languages Formal methods[edit] Main article: Formal methods Formal methods are a particular kind of mathematically based technique for the specification, development and verification of software and hardware systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical systems, where safety or security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi, formal languages, automata theory, and program semantics, but also type systems and algebraic data types to problems in software and hardware specification and verification. Applied computer science[edit] Applied Computer Science aims at identifying certain Computer Science concepts that can be used directly in solving real world problems. Artificial intelligence[edit] Main article: Artificial intelligence This branch of computer science aims to or is required to synthesise goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning and communication which are found in humans and animals. From its origins in cybernetics and in the Dartmouth Conference (1956), artificial intelligence (AI) research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics, symbolic logic, semiotics, electrical engineering, philosophy of mind, neurophysiology, and social intelligence. AI is associated in the popular mind with robotic development, but the main field of practical application has been as an embedded component in areas of software development which require computational understanding and modeling such as finance and economics, data mining and the physical sciences. The starting-point in the late 1940s was Alan Turing's question "Can computers think?", and the question remains effectively unanswered although the "Turing Test" is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data. Machine learning Computer vision Image processing Pattern recognition Cognitive science Data mining Evolutionary computation Information retrieval Knowledge representation Natural language processing Robotics Medical Image Computing Computer architecture and engineering[edit] Main articles: Computer architecture and Computer engineering Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.[45] The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals. Digital logic Microarchitecture Multiprocessing Operating systems Computer networks Databases Information security Ubiquitous computing Systems architecture Compiler design Programming languages Computer graphics and visualization[edit] Main article: Computer graphics (computer science) Computer graphics is the study of digital visual contents, and involves synthese and manipulations of image data. The study is connected to many other fields in computer science, including computer vision, image processing, and computational geometry, and is heavily applied in the fields of special effects and video games. Computer security and cryptography[edit] Main articles: Computer security and Cryptography Computer security is a branch of computer technology, whose objective includes protection of information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding (encryption) and therefore deciphering (decryption) information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity. Computational science[edit] Computational science (or scientific computing) is the field of study concerned with constructing mathematical models and quantitative analysis techniques and using computers to analyze and solve scientific problems. In practical use, it is typically the application of computer simulation and other forms of computation to problems in various scientific disciplines. Numerical analysis Computational physics Computational chemistry Bioinformatics Computer Networks[edit] Main article: Computer network This branch of computer science aims to manage networks between computers worldwide. Concurrent, parallel and distributed systems[edit] Main articles: Concurrency (computer science) and Distributed computing Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. A number of mathematical models have been developed for general concurrent computation including Petri nets, process calculi and the Parallel Random Access Machine model. A distributed system extends the idea of concurrency onto multiple computers connected through a network. Computers within the same distributed system have their own private memory, and information is often exchanged amongst themselves to achieve a common goal. Databases and information retrieval[edit] Main articles: Database and Database management systems A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through database models and query languages. Health Informatics[edit] Main article: Health Informatics Health Informatics in computer science deals with computational techniques for solving problems in health care. Information science[edit] Main article: Information science Information retrieval Knowledge representation Natural language processing Humancomputer interaction Software engineering[edit] Main article: Software engineering Software engineering is the study of designing, implementing, and modifying software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software it doesn't just deal with the creation or manufacture of new software, but its internal maintenance and arrangement. Both computer applications software engineers and computer systems software engineers are projected to be among the fastest growing occupations from 2008 and 2018. See also: computer programming The great insights of computer science[edit] The philosopher of computing Bill Rapaport noted three Great Insights of Computer Science [46] Bacon's, Leibniz's, Boole's, Alan Turing's, Shannon's, & Morse's insight: There are only 2 objects that a computer has to deal with in order to represent "anything" All the information about any computable problem can be represented using only 0 & 1 (or any other bistable pair that can flip-flop between two easily distinguishable states,such as "on"/"off", "magnetized/de-magnetized", "high-voltage/low-voltage", etc.). See also: digital physics Alan Turing's insight: There are only 5 actions that a computer has to perform in order to do "anything" Every algorithm can be expressed in a language for a computer consisting of only 5 basic instructions: * move left one location * move right one location * print 0 at current-location * print 1 at current-location * erase current-location[citation needed] See also: Turing machine Boehm and Jacopini's insight: There are only 3 ways of combining these actions (into more complex ones) that are needed in order for a computer to do "anything" Only 3 rules are needed to combine any set of basic instructions into more complex ones: sequence: first do this; then do that selection : IF such-&-such is the case, THEN do this ELSE do that repetition: WHILE such & such is the case DO this Note that the 3 rules of Boehm's and Jacopini's insight can be further simplified with the use of goto (which means it's more elementary than structured programming.) See also: Elementary function arithmetic#Friedman's grand conjecture Academia[edit] Conferences[edit] Further information: List of computer science conferences Conferences are strategic events of the Academic Research in computer science. During those conferences, researchers from the public and private sectors present their recent work and meet. Proceedings of these conferences are an important part of the computer science literature. Journals[edit] Further information: Category:Computer science journals Education[edit] Some universities teach computer science as a theoretical study of computation and algorithmic reasoning. These programs often feature the theory of computation, analysis of algorithms, formal methods, concurrency theory, databases, computer graphics, and systems analysis, among others. They typically also teach computer programming, but treat it as a vessel for the support of other fields of computer science rather than a central focus of high-level study. The ACM/IEEE-CS Joint Curriculum Task Force "Computing Curriculum 2005" (and 2008 update) [47] gives a guideline for university curriculum. Other colleges and universities, as well as secondary schools and vocational programs that teach computer science, emphasize the practice of advanced programming rather than the theory of algorithms and computation in their computer science curricula. Such curricula tend to focus on those skills that are important to workers entering the software industry. The process aspects of computer programming are often referred to as software engineering. While computer science professions increasingly drive the U.S. economy, computer science education is absent in most American K-12 curricula. A report entitled "Running on Empty: The Failure to Teach K-12 Computer Science in the Digital Age" was released in October 2010 by Association for Computing Machinery (ACM) and Computer Science Teachers Association (CSTA), and revealed that only 14 states have adopted significant education standards for high school computer science. The report also found that only nine states count high school computer science courses as a core academic subject in their graduation requirements. In tandem with "Running on Empty", a new non-partisan advocacy coalition - Computing in the Core (CinC) - was founded to influence federal and state policy, such as the Computer Science Education Act, which calls for grants to states to develop plans for improving computer science education and supporting computer science teachers. Within the United States a gender gap in computer science education has been observed as well. Research conducted by the WGBH Educational Foundation and the Association for Computing Machinery (ACM) revealed that more than twice as many high school boys considered computer science to be a very good or good college major than high school girls.[48] In addition, the high school Advanced Placement (AP) exam for computer science has displayed a disparity in gender. Compared to other AP subjects it has the lowest number of female participants, with a composition of about 15 percent women.[49] This gender gap in computer science is further witnessed at the college level, where 31 percent of undergraduate computer science degrees are earned by women and only 8 percent of computer science faculty consists of women.[50] According to an article published by the Epistemic Games Group in August 2012, the number of women graduates in the computer science field has declined to 13 percent.[51] See also[edit] Main article: Outline of computer science Computer science portal Academic genealogy of computer scientists Informatics (academic field) List of academic computer science departments List of computer science conferences List of computer scientists List of publications in computer science List of pioneers in computer science List of software engineering topics List of unsolved problems in computer science Women in computing Computer science at Wikipedia books Notes[edit] ^ See the entry "Computer science" on Wikiquote for the history of this quotation. References[edit] ^ http://www.cs.bu.edu/AboutCS/WhatIsCS.pdf. ^ "WordNet Search - 3.1". Wordnetweb.princeton.edu. Retrieved 2012-05-14.  ^ "Blaise Pascal". School of Mathematics and Statistics University of St Andrews, Scotland.  ^ "A Brief History of Computing".  ^ In 1851 ^ "Science Museum - Introduction to Babbage". Archived from the original on 2006-09-08. Retrieved 2006-09-24.  ^ Anthony Hyman, Charles Babbage, pioneer of the computer, 1982 ^ "The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine." Bruce Collier, 1970 ^ "A Selection and Adaptation From Ada's Notes found in "Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA". Retrieved 2006-05-04.  ^ "In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another", Bernard Cohen, p.44 (2000) ^ Brian Randell, p.187, 1975 ^ The Association for Computing Machinery (ACM) was founded in 1947. ^ a b c Denning, P.J. (2000). "Computer Science: The Discipline" (PDF). Encyclopedia of Computer Science. Archived from the original on 2006-05-25.  ^ "Some EDSAC statistics". Cl.cam.ac.uk. Retrieved 2011-11-19.  ^ Computer science pioneer Samuel D. Conte dies at 85 July 1, 2002 ^ a b Levy, Steven (1984). Hackers: Heroes of the Computer Revolution. Doubleday. ISBN 0-385-19195-2.  ^ "IBM 704 Electronic Data Processing System - CHM Revolution". Computerhistory.org. Retrieved 2013-07-07.  ^ http://archive.computerhistory.org/resources/text/IBM/IBM.709.1957.102646304.pdf ^ a b David Kahn, The Codebreakers, 1967, ISBN 0-684-83130-9. ^ a b http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf ^ Constable, R.L. (March 2000). Computer Science: Achievements and Challenges circa 2000 (PDF). [dead link] ^ Abelson, H.; G.J. Sussman with J. Sussman (1996). Structure and Interpretation of Computer Programs (2nd ed.). MIT Press. ISBN 0-262-01153-0. "The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called procedural epistemology  the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects."  Cite uses deprecated parameters (help) ^ Black box traders are on the march The Telegraph, August 26, 2006 ^ "The Impact of High Frequency Trading on an Electronic Market". Papers.ssrn.com. doi:10.2139/ssrn.1686004. Retrieved 2012-05-14.  ^ Wegner, P. (October 1315, 1976). "Research paradigms in computer science". Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA.  Check date values in: |date= (help) ^ Denning, P. J.; Comer, D. E.; Gries, D.; Mulder, M. C.; Tucker, A.; Turner, A. J.; Young, P. R. (Jan 1989). "Computing as a discipline". Communications of the ACM 32: 923. doi:10.1145/63238.63239.  edit ^ Eden, A. H. (2007). "Three Paradigms of Computer Science". Minds and Machines 17 (2): 135167. doi:10.1007/s11023-007-9060-8.  edit ^ Louis Fine (1959). "The Role of the University in Computers, Data Processing, and Related Fields". Communications of the ACM 2 (9): 714. doi:10.1145/368424.368427.  ^ "Stanford University Oral History". Stanford University. Retrieved 30 May 2013.  ^ id., p. 11 ^ Donald Knuth (1972). "George Forsythe and the Development of Computer Science". Comms. ACM. ^ Matti Tedre (2006). The Development of Computer Science: A Sociocultural Perspective, p.260 ^ Peter Naur (1966). "The science of datalogy". Communications of the ACM 9 (7): 485. doi:10.1145/365719.366510.  ^ Communications of the ACM 1(4):p.6 ^ Communications of the ACM 2(1):p.4 ^ IEEE Computer 28(12):p.136 ^ P. Mounier-Kuhn, LInformatique en France, de la seconde guerre mondiale au Plan Calcul. Lémergence dune science, Paris, PUPS, 2010, ch. 3 & 4. ^ Tedre, M. (2011). "Computing as a Science: A Survey of Competing Viewpoints". Minds and Machines 21 (3): 361387. doi:10.1007/s11023-011-9240-4.  edit ^ Parnas, D. L. (1998). Annals of Software Engineering 6: 1937. doi:10.1023/A:1018949113292.  edit, p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, [...]" ^ a b Computing Sciences Accreditation Board (28 May 1997). "Computer Science as a Profession". Archived from the original on 2008-06-17. Retrieved 2010-05-23.  ^ Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council (2004). Computer Science: Reflections on the Field, Reflections from the Field. National Academies Press. ISBN 978-0-309-09301-9.  ^ "Csab, Inc". Csab.org. 2011-08-03. Retrieved 2011-11-19.  ^ Clay Mathematics Institute P=NP ^ P. Collins, Graham. "Claude E. Shannon: Founder of Information Theory". Scientific American, Inc.  ^ A. Thisted, Ronald. "COMPUTER ARCHITECTURE". The University of Chicago. Retrieved 7 April 1997.  ^ http://www.cse.buffalo.edu/~rapaport/computation.html ^ "ACM Curricula Recommendations". Retrieved 2012-11-18.  ^ http://www.acm.org/membership/NIC.pdf ^ Gilbert, Alorie. "Newsmaker: Computer science's gender gap". CNET News.  ^ Dovzan, Nicole. "Examining the Gender Gap in Technology". University of Michigan.  ^ "Encouraging the next generation of women in computing". Microsoft Research Connections Team. Retrieved 3 Sep 2013.  "Computer Software Engineer." U.S. Bureau of Labor Statistics. U.S. Bureau of Labor Statistics, n.d. Web. 05 Feb. 2013. Further reading[edit] Overview Tucker, Allen B. (2004). Computer Science Handbook (2nd ed.). Chapman and Hall/CRC. ISBN 1-58488-360-X.  "Within more than 70 chapters, every one new or significantly revised, one can find any kind of information and references about computer science one can imagine. [...] all in all, there is absolute nothing about Computer Science that can not be found in the 2.5 kilogram-encyclopaedia with its 110 survey articles [...]." (Christoph Meinel, Zentralblatt MATH) van Leeuwen, Jan (1994). Handbook of Theoretical Computer Science. The MIT Press. ISBN 0-262-72020-5.  "[...] this set is the most unique and possibly the most useful to the [theoretical computer science] community, in support both of teaching and research [...]. The books can be used by anyone wanting simply to gain an understanding of one of these areas, or by someone desiring to be in research in a topic, or by instructors wishing to find timely information on a subject they are teaching outside their major areas of expertise." (Rocky Ross, SIGACT News) Ralston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000). Encyclopedia of Computer Science (4th ed.). Grove's Dictionaries. ISBN 1-56159-248-X.  "Since 1976, this has been the definitive reference work on computer, computing, and computer science. [...] Alphabetically arranged and classified into broad subject areas, the entries cover hardware, computer systems, information and data, software, the mathematics of computing, theory of computation, methodologies, applications, and computing milieu. The editors have done a commendable job of blending historical perspective and practical reference information. The encyclopedia remains essential for most public and academic library reference collections." (Joe Accardin, Northeastern Illinois Univ., Chicago) Edwin D. Reilly (2003). Milestones in Computer Science and Information Technology. Greenwood Publishing Group. ISBN 978-1-57356-521-9.  Selected papers Knuth, Donald E. (1996). Selected Papers on Computer Science. CSLI Publications, Cambridge University Press.  Collier, Bruce. The little engine that could've: The calculating machines of Charles Babbage. Garland Publishing Inc. ISBN 0-8240-0043-9.  Cohen, Bernard (2000). Howard Aiken, Portrait of a computer pioneer. The MIT press. ISBN 978-0-2625317-9-5.  Randell, Brian (1973). The origins of Digital computers, Selected Papers. Springer-Verlag. ISBN 3-540-06169-X.  "Covering a period from 1966 to 1993, its interest lies not only in the content of each of these papers  still timely today  but also in their being put together so that ideas expressed at different times complement each other nicely." (N. Bernard, Zentralblatt MATH) Articles Peter J. Denning. Is computer science science?, Communications of the ACM, April 2005. Peter J. Denning, Great principles in computing curricula, Technical Symposium on Computer Science Education, 2004. Research evaluation for computer science, Informatics Europe report[dead link]. Shorter journal version: Bertrand Meyer, Christine Choppy, Jan van Leeuwen and Jorgen Staunstrup, Research evaluation for computer science, in Communications of the ACM, vol. 52, no. 4, pp. 3134, April 2009. Curriculum and classification Association for Computing Machinery. 1998 ACM Computing Classification System. 1998. Joint Task Force of Association for Computing Machinery (ACM), Association for Information Systems (AIS) and IEEE Computer Society (IEEE-CS). Computing Curricula 2005: The Overview Report. September 30, 2005. Norman Gibbs, Allen Tucker. "A model curriculum for a liberal arts degree in computer science". Communications of the ACM, Volume 29 Issue 3, March 1986. External links[edit] Find more about Computer science at Wikipedia's sister projects Definitions and translations from Wiktionary Media from Commons Quotations from Wikiquote Source texts from Wikisource Textbooks from Wikibooks Learning resources from Wikiversity Library resources about Computer science Resources in your library Resources in other libraries Computer science on the Open Directory Project Scholarly Societies in Computer Science Best Papers Awards in Computer Science since 1996 Photographs of computer scientists by Bertrand Meyer EECS.berkeley.edu Bibliography and academic search engines CiteSeerx (article): search engine, digital library and repository for scientific and academic papers with a focus on computer and information science. DBLP Computer Science Bibliography (article): computer science bibliography website hosted at Universit?t Trier, in Germany. The Collection of Computer Science Bibliographies (article) Professional organizations Association for Computing Machinery IEEE Computer Society Informatics Europe Misc Computer Science - Stack Exchange a community run Question and Answer site for Computer Science What is computer science Is computer science science? v t e Major fields of computer science Mathematical foundations Mathematical logic Set theory Number theory Graph theory Type theory Category theory Numerical analysis Information theory Combinatorics Boolean algebra Theory of computation Automata theory Computability theory Computational complexity theory Quantum computing theory Algorithms, data structures Analysis of algorithms Algorithm design Computational geometry Programming languages, compilers Parsers Interpreters Procedural programming Object-oriented programming Functional programming Logic programming Programming paradigms Concurrent, parallel, distributed systems Multiprocessing Grid computing Concurrency control Software engineering Requirements analysis Software design Computer programming Formal methods Software testing Software development process System architecture Computer architecture Computer organization Operating systems Telecommunication, networking Computer audio Routing Network topology Cryptography Databases Database management systems Relational databases SQL Transactions Database indexes Data mining Artificial intelligence Automated reasoning Computational linguistics Computer vision Evolutionary computation Expert systems Machine learning Natural language processing Robotics Computer graphics Visualization Computer animation Image processing Humancomputer interaction Computer accessibility User interfaces Wearable computing Ubiquitous computing Virtual reality Scientific computing Artificial life Bioinformatics Cognitive science Computational chemistry Computational neuroscience Computational physics Numerical algorithms Symbolic mathematics Note: Computer science can also be divided into different topics or fields according to the ACM Computing Classification System. v t e Technology Outline of technology Outline of applied science Fields Agriculture Agricultural engineering Aquaculture Fisheries science Food chemistry Food engineering Food microbiology Food technology GURT ICT in agriculture Nutrition Biomedical Bioinformatics Biological engineering Biomechatronics Biomedical engineering Biotechnology Cheminformatics Genetic engineering Healthcare science Medical research Medical technology Nanomedicine Neuroscience Neurotechnology Pharmacology Reproductive technology Tissue engineering Buildings and Construction Acoustical engineering Architectural engineering Building services engineering Civil engineering Construction engineering Domestic technology Facade engineering Fire protection engineering Safety engineering Sanitary engineering Structural engineering Educational Educational software Digital technologies in education ICT in education Impact Multimedia learning Virtual campus Virtual education Energy Nuclear engineering Nuclear technology Petroleum engineering Soft energy technology Environmental Clean technology Clean coal technology Ecological design Ecological engineering Ecotechnology Environmental engineering Environmental engineering science Green building Green nanotechnology Landscape engineering Renewable energy Sustainable design Sustainable engineering Industrial Automation Business informatics Engineering management Enterprise engineering Financial engineering Industrial biotechnology Industrial engineering Industrial gas Metallurgy Mining engineering Productivity improving technologies Research and development IT and communications Artificial intelligence Broadcast engineering Computer engineering Computer science Information technology Music technology Ontology engineering RF engineering Software engineering Telecommunications engineering Visual technology Web engineering Military Army engineering maintenance Electronic warfare Military communications Military engineering Stealth technology Transport Aerospace engineering Automotive engineering Naval architecture Space technology Traffic engineering Transport engineering Other applied sciences Cryogenics Electro-optics Electronics Engineering geology Engineering physics Hydraulics Materials science Microfabrication Nanoengineering Other engineering fields Audio Biochemical Ceramic Chemical Polymer Control Electrical Electronic Entertainment Geotechnical Hydraulic Mechanical Mechatronics Optical Protein Quantum Robotics Animatronics Systems Components Infrastructure Invention Timeline Knowledge Machine Skill Craft Tool Gadget Scale Femtotechnology Picotechnology Nanotechnology Microtechnology Macro-engineering Megascale engineering History Prehistoric technology Neolithic Revolution Ancient technology Medieval technology Renaissance technology Industrial Revolution Second Jet Age Digital Revolution Information Age Theories and concepts Appropriate technology Critique of technology Diffusion of innovations Disruptive innovation Dual-use technology Ephemeralization Ethics of technology High tech Hype cycle Inevitability thesis Low-technology Mature technology Philosophy of technology Strategy of Technology Technicism Techno-progressivism Technocapitalism Technocentrism Technocracy Technocriticism Technoetic Technoethics Technological change Technological convergence Technological determinism Technological escalation Technological evolution Technological fix Technological innovation system Technological momentum Technological nationalism Technological rationality Technological revival Technological singularity Technological somnambulism Technological utopianism Technology lifecycle Technology acceptance model Technology adoption lifecycle Technomancy Technorealism Transhumanism Other Emerging technologies List Fictional technology Technopaganism High-technology business districts Kardashev scale List of technologies Science, technology and society Technology dynamics Science and technology by country Technology alignment Technology assessment Technology brokering Technology companies Technology demonstration Technology education Technical universities and colleges Technology evangelist Technology fusion Technology governance Technology integration Technology journalism Technology management Technology policy Technology shock Technology strategy Technology and society Technology transfer Technoself Technosignature Weapon List Book Category Commons Portal Wikiquotes Retrieved from "http://en.wikipedia.org/w/index.php?title=Computer_science&oldid=591464272" Categories: Computer science Hidden categories: All articles with dead external links Articles with dead external links from July 2013 Pages containing cite templates with deprecated parameters CS1 errors: dates All articles with unsourced statements Articles with unsourced statements from October 2010 Articles with unsourced statements from October 2013 Articles with Open Directory Project links Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print/export Create a book Download as PDF Printable version Languages Afrikaans Alemannisch ???? ÇáÚÑÈíÉ Aragonés Arm?neashce ??????? Asturianu Az?rbaycanca ????? Bân-lâm-g? ?????????? ?????????? (???????????)ý ????????? Boarisch Bosanski Brezhoneg ?e?tina Corsu Cymraeg Dansk Deutsch Eesti ???????? Emiliàn e rumagn?l Espa?ol Estreme?u Euskara ÝÇÑÓ? F?royskt Français Frysk Furlan Gaeilge Gaelg ??? ??????? ?????? Hrvatski Ido Bahasa Indonesia Interlingua Interlingue ??????/inuktitut ?slenska Italiano ????? Kalaallisut ????? ??????? Kaszëbsczi ??????? Krey?l ayisyen Kurdî Ladino Latga?u Latina Latvie?u Lëtzebuergesch Lietuvi? Limburgs Lojban Magyar ?????????? Malagasy ?????? Bahasa Melayu Mirandés ?????? Nederlands Nedersaksies ?????? ????? ???? ??? Napulitano Nordfriisk Norsk bokm?l Norsk nynorsk Novial Occitan ???? ????? O?zbekcha ???? ?Êæ Picard Piemontèis Polski Português Român? ?????????? ??????? Shqip Sicilianu ????? Simple English Sloven?ina Sloven??ina ?????? / srpski Srpskohrvatski / ?????????????? Suomi Svenska Tagalog ????? Taqbaylit ???????/tatarça ?????? ??? ???? ?????? Türkçe Türkmençe ?????????? ÇÑÏæ Æ?íÛ?Ñ? / Uyghurche Vèneto Ti?ng Vi?t V?ro Walon Winaray Wolof ?? Yorùb? ?? Zeêuws ?emait??ka ?? Edit links This page was last modified on 19 January 2014 at 21:05. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view