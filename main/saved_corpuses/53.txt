Vector space model - Wikipedia, the free encyclopedia Vector space model From Wikipedia, the free encyclopedia Jump to: navigation, search Vector space model or term vector model is an algebraic model for representing text documents (and any objects, in general) as vectors of identifiers, such as, for example, index terms. It is used in information filtering, information retrieval, indexing and relevancy rankings. Its first use was in the SMART Information Retrieval System. Contents 1 Definitions 2 Applications 3 Example: tf-idf weights 4 Advantages 5 Limitations 6 Models based on and extending the vector space model 7 Software that implements the vector space model 7.1 Free open source software 8 Further reading 9 See also 10 References Definitions[edit] Documents and queries are represented as vectors. Each dimension corresponds to a separate term. If a term occurs in the document, its value in the vector is non-zero. Several different ways of computing these values, also known as (term) weights, have been developed. One of the best known schemes is tf-idf weighting (see the example below). The definition of term depends on the application. Typically terms are single words, keywords, or longer phrases. If the words are chosen to be the terms, the dimensionality of the vector is the number of words in the vocabulary (the number of distinct words occurring in the corpus). Vector operations can be used to compare documents with queries. Applications[edit] Relevance rankings of documents in a keyword search can be calculated, using the assumptions of document similarities theory, by comparing the deviation of angles between each document vector and the original query vector where the query is represented as the same kind of vector as the documents. In practice, it is easier to calculate the cosine of the angle between the vectors, instead of the angle itself: Where is the intersection (i.e. the dot product) of the document (d2 in the figure to the right) and the query (q in the figure) vectors, is the norm of vector d2, and is the norm of vector q. The norm of a vector is calculated as such: As all vectors under consideration by this model are elementwise nonnegative, a cosine value of zero means that the query and document vector are orthogonal and have no match (i.e. the query term does not exist in the document being considered). See cosine similarity for further information. Example: tf-idf weights[edit] In the classic vector space model proposed by Salton, Wong and Yang [1] the term specific weights in the document vectors are products of local and global parameters. The model is known as term frequency-inverse document frequency model. The weight vector for document d is , where and is term frequency of term t in document d (a local parameter) is inverse document frequency (a global parameter). is the total number of documents in the document set; is the number of documents containing the term t. Using the cosine the similarity between document dj and query q can be calculated as: Advantages[edit] The vector space model has the following advantages over the Standard Boolean model: Simple model based on linear algebra Term weights not binary Allows computing a continuous degree of similarity between queries and documents Allows ranking documents according to their possible relevance Allows partial matching Limitations[edit] The vector space model has the following limitations: Long documents are poorly represented because they have poor similarity values (a small scalar product and a large dimensionality) Search keywords must precisely match document terms; word substrings might result in a "false positive match" Semantic sensitivity; documents with similar context but different term vocabulary won't be associated, resulting in a "false negative match". The order in which the terms appear in the document is lost in the vector space representation. Theoretically assumes terms are statistically independent. Weighting is intuitive but not very formal. Many of these difficulties can, however, be overcome by the integration of various tools, including mathematical techniques such as singular value decomposition and lexical databases such as WordNet. Models based on and extending the vector space model[edit] Models based on and extending the vector space model include: Generalized vector space model Latent semantic analysis Term Discrimination Rocchio Classification Random Indexing Software that implements the vector space model[edit] The following software packages may be of interest to those wishing to experiment with vector models and implement search services based upon them. Free open source software[edit] Apache Lucene. Apache Lucene is a high-performance, full-featured text search engine library written entirely in Java. SemanticVectors. Semantic Vector indexes, created by applying a Random Projection algorithm (similar to Latent semantic analysis) to term-document matrices created using Apache Lucene. Gensim is a Python+NumPy framework for Vector Space modelling. It contains incremental (memory-efficient) algorithms for Tf–idf, Latent Semantic Indexing, Random Projections and Latent Dirichlet Allocation. Weka. Weka is popular data mining package for Java including WordVectors and Bag Of Words models. Compressed vector space in C++ by Antonio Gulli Text to Matrix Generator (TMG) MATLAB toolbox that can be used for various tasks in text mining specifically i) indexing, ii) retrieval, iii) dimensionality reduction, iv) clustering, v) classification. Most of TMG is written in MATLAB and parts in Perl. It contains implementations of LSI, clustered LSI, NMF and other methods. SenseClusters, an open source package that supports context and word clustering using Latent Semantic Analysis and word co-occurrence matrices. S-Space Package, a collection of algorithms for exploring and working with statistical semantics. Further reading[edit] G. Salton, A. Wong, and C. S. Yang (1975), "A Vector Space Model for Automatic Indexing," Communications of the ACM, vol. 18, nr. 11, pages 613–620. (Article in which a vector space model was presented) David Dubin (2004), The Most Influential Paper Gerard Salton Never Wrote (Explains the history of the Vector Space Model and the non-existence of a frequently cited publication) Description of the vector space model Description of the classic vector space model by Dr E. Garcia Relationship of vector space search to the "k-Nearest Neighbor" search See also[edit] Bag-of-words model Nearest neighbor search Compound term processing Inverted index w-shingling Eigenvalues and eigenvectors References[edit] ^ G. Salton , A. Wong , C. S. Yang, A vector space model for automatic indexing, Communications of the ACM, v.18 n.11, p.613-620, Nov. 1975 Retrieved from "http://en.wikipedia.org/w/index.php?title=Vector_space_model&oldid=583226109" Categories: Vector space model Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print/export Create a book Download as PDF Printable version Languages Deutsch Espa?ol Français ??? Magyar ??? Português ??????? ?? Edit links This page was last modified on 25 November 2013 at 12:49. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view